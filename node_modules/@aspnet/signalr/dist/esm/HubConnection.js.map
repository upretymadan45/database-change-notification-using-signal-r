{"version":3,"file":"HubConnection.js","sourceRoot":"","sources":["../../src/HubConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Arg, Subject } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected,\r\n    /** The hub connection is connected. */\r\n    Connected,\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private connectionState: HubConnectionState;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol): HubConnection {\r\n        return new HubConnection(connection, logger, protocol);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n        await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.resetTimeoutPeriod();\r\n        this.resetKeepAliveInterval();\r\n\r\n        // Wait for the handshake to complete before marking connection as connected\r\n        await handshakePromise;\r\n        this.connectionState = HubConnectionState.Connected;\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendMessage(cancelMessage);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        promiseQueue = this.sendMessage(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.sendMessage(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.sendMessage(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @aspnet/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @aspnet/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        // We don't want to wait on the stop itself.\r\n                        // tslint:disable-next-line:no-floating-promises\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined);\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(error);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            this.handshakeRejecter(message);\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(new Error(message));\r\n            throw new Error(message);\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        this.cleanupPingTimer();\r\n        this.pingServerHandle = setTimeout(async () => {\r\n            if (this.connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this.sendMessage(this.cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this.cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't need to wait on this Promise.\r\n                // tslint:disable-next-line:no-floating-promises\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n\r\n        // if handshake is in progress start will be waiting for the handshake promise, so we complete it\r\n        // if it has already completed this should just noop\r\n        if (this.handshakeRejecter) {\r\n            this.handshakeRejecter(error);\r\n        }\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n"]}